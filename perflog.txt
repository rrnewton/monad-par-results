

[2011.02.18] 
A log for verbose notes pertaining to performance.
--------------------------------------------------



[2011.02.18] {Initial blackscholes runs}

First a version of blackscholes that uses the parMap in par.hs.

GHC 7.0.1, released version.
Listing a couple runs at each setting.

Running on a 4-core 3.33 ghz nehalem, SMT on (with -qa)
  10M options with 10K blocksize:
    1 thread -- 5.1 s
    2        -- 6.25s  5.87s real/user
    2 thr #2 -- 3.8s   6.4s 
    3        -- 2.8s   5.38s
    3        -- 2.0s   5.86s
    4        -- 1.8s   5.4s 
    4        -- 1.3s   5.15s 
    5        -- 1.5s   5.4s 
    5        -- 1.15s  5.6s 

High variance... definitely thrashing sometimes.  It very rarely uses
over 300% cpu at 4 threads.

Removing the "-qa" option doesn't seem to change things much.
Even when it does badly its only spending 1% of time in GC.

  Next let's try AList's parBuild.
  --------------------------------

Not working right yet...


What about mandel?
  It's getting <2X speedup for me on four threads on this machine atm.
  It's about the same with the factored AList/parBuild as opposed to
  the original.


[2011.11.09] {Timing parfib/Direct with new Deques}

This is on a 3.10 ghz 4 core Westmere workstation.
With -A1M -qa:

First, the status-quo performance of Direct scheduler on the master
branch (with the poor man's list-in-an-IORef queues).
                         real   user   productivity mem 
    fib(38) 4 threads:   3.46   13.5   48%          45GB

Second, using SimpleDeque type from Reference.hs.  This is a Sequence
in an IORef wih some extra overhead due to dealing with bounded-queue
semantics:

    fib(38) 1 thread :   14.2  14.0 96%  61GB
    fib(38) 4 threads:   4.2   16   48%  61GB

Then, as a sanity check, using the Class interface.

    fib(38) 1 thread :   15.2  14.9 96%    61GB
    fib(38) 4 threads:   4.4   17.3 50.7%  61GB

Finally, trying ChaseLev deques, Reactor implementation:

    fib(38) 4 threads:   23s   90   59.3%  205G

!! Terrible !!


[2011.12.09] {Updating new Deque results}

First, sanity checking what we had before:

    fib(38) 4 threads:   4.17   16.15  47.9%  61.8G

GHC 7.2.1, westmere 3.1ghz wokstation.

Then, if we swap in atomicModifyIORefCAS...

    fib(38) 4 threads:   3.84   14.9   51.6%  55.7G

BUT now it segfaults!!!  CAS would appear to be completely broken at
the moment.

Darn.  Well, for now I'll have to back off and use the older version
of abstract-deque.
